// ################################
// ####### Neo4j - Graph V3 #######
// ################################

// --------------------------
// ------- Clear Data -------
// --------------------------

// Retrieve all non-standalone nodes (n) with a relation (r) & delete them
MATCH (n)-[r]->() DELETE n, r

// Retrieve all standalone nodes (n) & delete them
MATCH (n) DELETE (n)

// ------------------------------
// ------- Initialization -------
// ------------------------------

// Create node for each canton with its FSO-id
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/geographicsGeometry/localitiesCommunesDistrictsCantons/be-t-00.04-agv-01_KT.csv' AS CantonFSO
CREATE (:canton{
	cantonName:CantonFSO.GDEKT, 
	cantonFSO:CantonFSO.KTNR
});

// Create year node for each canton 
UNWIND range(2016, 2022) as year
MATCH (c:canton)
CREATE (:year{
	year:year,
	cantonName:c.cantonName,
	cantonFSO:c.cantonFSO
});

// Create relationship between year and canton nodes
MATCH (c:canton), (y:year)
WHERE EXISTS (c.cantonName) AND EXISTS (y.cantonName) AND c.cantonName=y.cantonName
CREATE (y)-[:STATS_OF_CANTON]->(c)

// ----------------------------------
// ------- demographicsIncome -------
// ----------------------------------

// Create nodes from 'groupCorrespondence.csv'
UNWIND [2016, 2018] AS incomeYear
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsIncome/groupCorrespondence.csv' AS demoIncomecsv
CREATE (:demoIncome{
	nodeType:'demoIncome',
	year:incomeYear,
    cantonFSO:demoIncomecsv.canton_id,
    cantonName:demoIncomecsv.canton,
    groupID:demoIncomecsv.group_id
});

// Create relationships between demoIncomeGroup & year
MATCH (g:demoIncome), (y:year)
WHERE EXISTS (g.cantonName) AND EXISTS (y.cantonName) AND g.cantonName=y.cantonName AND EXISTS (g.year) AND EXISTS (y.year) AND g.year=y.year
CREATE (g)-[:STATS_OF_YEAR]->(y)

// Create nodes from '2016_demographicsIncome_GroupX'
UNWIND [{groupID:1, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsIncome/2016_demographicsIncome_Group1_GE_VD_VS.csv'}, {groupID:2, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsIncome/2016_demographicsIncome_Group2_BE_FR_JU_NE_SO.csv'}, {groupID:3, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsIncome/2016_demographicsIncome_Group3_AG_BL_BS.csv'}, {groupID:4, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsIncome/2016_demographicsIncome_Group4_ZH.csv'}, {groupID:5, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsIncome/2016_demographicsIncome_Group5_AI_AR_GL_GR_SG_SH_TG.csv'}, {groupID:6, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsIncome/2016_demographicsIncome_Group6_LU_NW_OW_SZ_UR_ZG.csv'}, {groupID:7, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsIncome/2016_demographicsIncome_Group7_TI.csv'}] AS demoIncomeGroup_urls
LOAD CSV WITH HEADERS FROM demoIncomeGroup_urls.url AS demoIncomeGroupcsv
CREATE (:demoIncomeGroup{
	nodeType:'demoIncomeGroup',
	year:2016,
	groupID:toString(demoIncomeGroup_urls.groupID),
	category:demoIncomeGroupcsv.category,
	ageAllTotal:demoIncomeGroupcsv.ageAllTotal,
	ageAllFemale:demoIncomeGroupcsv.ageAllFemale,
	ageAllMale:demoIncomeGroupcsv.ageAllMale,
	age29minusTotal:demoIncomeGroupcsv.age29minusTotal,
	age29minusFemale:demoIncomeGroupcsv.age29minusFemale,
	age29minusMale:demoIncomeGroupcsv.age29minusMale,
	age30_49Total:demoIncomeGroupcsv.age30_49Total,
	age30_49Female:demoIncomeGroupcsv.age30_49Female,
	age30_49Male:demoIncomeGroupcsv.age30_49Male,
	age50plusTotal:demoIncomeGroupcsv.age50plusTotal,
	age50plusFemale:demoIncomeGroupcsv.age50plusFemale,
	age50plusMale:demoIncomeGroupcsv.age50plusMale
});

// Create nodes from '2018_demographicsIncome_GroupX'
UNWIND [{groupID:1, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsIncome/2018_demographicsIncome_Group1_GE_VD_VS.csv'}, {groupID:2, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsIncome/2018_demographicsIncome_Group2_BE_FR_JU_NE_SO.csv'}, {groupID:3, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsIncome/2018_demographicsIncome_Group3_AG_BL_BS.csv'}, {groupID:4, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsIncome/2018_demographicsIncome_Group4_ZH.csv'}, {groupID:5, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsIncome/2018_demographicsIncome_Group5_AI_AR_GL_GR_SG_SH_TG.csv'}, {groupID:6, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsIncome/2018_demographicsIncome_Group6_LU_NW_OW_SZ_UR_ZG.csv'}, {groupID:7, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsIncome/2018_demographicsIncome_Group7_TI.csv'}] AS demoIncomeGroup_urls
LOAD CSV WITH HEADERS FROM demoIncomeGroup_urls.url AS demoIncomeGroupcsv
CREATE (:demoIncomeGroup{
	nodeType:'demoIncomeGroup',
	year:2018,
	groupID:toString(demoIncomeGroup_urls.groupID),
	category:demoIncomeGroupcsv.category,
	ageAllTotal:demoIncomeGroupcsv.ageAllTotal,
	ageAllFemale:demoIncomeGroupcsv.ageAllFemale,
	ageAllMale:demoIncomeGroupcsv.ageAllMale,
	age29minusTotal:demoIncomeGroupcsv.age29minusTotal,
	age29minusFemale:demoIncomeGroupcsv.age29minusFemale,
	age29minusMale:demoIncomeGroupcsv.age29minusMale,
	age30_49Total:demoIncomeGroupcsv.age30_49Total,
	age30_49Female:demoIncomeGroupcsv.age30_49Female,
	age30_49Male:demoIncomeGroupcsv.age30_49Male,
	age50plusTotal:demoIncomeGroupcsv.age50plusTotal,
	age50plusFemale:demoIncomeGroupcsv.age50plusFemale,
	age50plusMale:demoIncomeGroupcsv.age50plusMale
});

// Create relationship between demoIncome & demoIncomeGroup
MATCH (d:demoIncome), (g:demoIncomeGroup)
WHERE EXISTS (d.groupID) AND EXISTS (g.groupID) AND d.groupID=g.groupID AND EXISTS (d.year) AND EXISTS (g.year) AND d.year=g.year
CREATE (g)-[:PART_OF]->(d)

// ----------------------------------------------
// ------- demographicsStructure_Absolute -------
// ----------------------------------------------

// Create nodes from '20XX_demographicsStructure_Absolute.csv'
UNWIND [{year:2016, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsStructure/2016_demographicsStructure_Absolute.csv'}, {year:2017, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsStructure/2017_demographicsStructure_Absolute.csv'}, {year:2018, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsStructure/2018_demographicsStructure_Absolute.csv'}, {year:2019, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsStructure/2019_demographicsStructure_Absolute.csv'}, {year:2020, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsStructure/2020_demographicsStructure_Absolute.csv'}] AS demoStrAbs_urls
LOAD CSV WITH HEADERS FROM demoStrAbs_urls.url AS demoStrAbscsv 
CREATE (:demoStrAbs{
	nodeType:'demoStrAbs',
	year:demoStrAbs_urls.year,
	region:demoStrAbscsv.region,
	total:demoStrAbscsv.total,
	age0_19:demoStrAbscsv.age0_19,
	age20_64:demoStrAbscsv.age20_64,
	age65plus:demoStrAbscsv.age65plus,
	sexMale:demoStrAbscsv.sexMale,
	sexFemale:demoStrAbscsv.sexFemale,
	citizenSwiss:demoStrAbscsv.citizenSwiss,
	citizenForeign:demoStrAbscsv.citizenForeign,
	maritalSingle:demoStrAbscsv.maritalSingle,
	maritalMarried:demoStrAbscsv.maritalMarried,
	maritalWidowed:demoStrAbscsv.maritalWidowed,
	maritalDivorced:demoStrAbscsv.maritalDivorced,
	maritalUnmarried:demoStrAbscsv.maritalUnmarried,
	martialRegistredPartnership:demoStrAbscsv.martialRegistredPartnership,
	maritalDisolvedPartnership:demoStrAbscsv.maritalDisolvedPartnership,
	typoUrbanCore:demoStrAbscsv.typoUrbanCore,
	typoUrbanCoreInfluence:demoStrAbscsv.typoUrbanCoreInfluence,
	typoNoUrbanCoreInfluence:demoStrAbscsv.typoNoUrbanCoreInfluence
});

// Create relationship between demoStrAbs & year
MATCH (d:demoStrAbs), (y:year)
WHERE EXISTS (d.year) AND EXISTS (y.year) AND d.year=y.year AND EXISTS (d.region) AND EXISTS (y.cantonName) AND d.region=y.cantonName
CREATE (y)-[:ON_TOPIC]->(d)

// ----------------------------------------------
// ------- demographicsLanguages_Absolute -------
// ----------------------------------------------

// Create nodes from '20XX_demographicsLanguages_Absolute.'
UNWIND [{year:2016, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsLanguages/2016_demographicsLanguages_Absolute.csv'}, {year:2017, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsLanguages/2017_demographicsLanguages_Absolute.csv'}, {year:2018, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsLanguages/2018_demographicsLanguages_Absolute.csv'}, {year:2019, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsLanguages/2019_demographicsLanguages_Absolute.csv'}, {year:2020, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsLanguages/2020_demographicsLanguages_Absolute.csv'}] AS demoLangAbs_urls
LOAD CSV WITH HEADERS FROM demoLangAbs_urls.url AS demoLangAbscsv 
CREATE (:demoLangAbs{
	nodeType:'demoLangAbs',
	year:demoLangAbs_urls.year,
	region:demoLangAbscsv.region,
	total:demoLangAbscsv.total,
	german:demoLangAbscsv.german,
	german_IC:demoLangAbscsv.german_IC,
	french:demoLangAbscsv.french,
	french_IC:demoLangAbscsv.french_IC,
	italian:demoLangAbscsv.italian,
	italian_IC:demoLangAbscsv.italian_IC,
	romansh:demoLangAbscsv.romansh,
	romansh_IC:demoLangAbscsv.romansh_IC,
	english:demoLangAbscsv.english,
	english_IC:demoLangAbscsv.english_IC,
	portuguese:demoLangAbscsv.portuguese,
	portuguese_IC:demoLangAbscsv.portuguese_IC,
	bosnianCroatianMontenegrinSerbian:demoLangAbscsv.bosnianCroatianMontenegrinSerbian,
	bosnianCroatianMontenegrinSerbian_IC:demoLangAbscsv.bosnianCroatianMontenegrinSerbian_IC,
	albanian:demoLangAbscsv.albanian,
	albanian_IC:demoLangAbscsv.albanian_IC,
	spanish:demoLangAbscsv.spanish,
	spanish_IC:demoLangAbscsv.spanish_IC,
	turkish:demoLangAbscsv.turkish,
	turkish_IC:demoLangAbscsv.turkish_IC,
	otherLanguages:demoLangAbscsv.otherLanguages,
	otherLanguages_IC:demoLangAbscsv.otherLanguages_IC
});

// Create relationship between demoStrAbs & year
MATCH (d:demoLangAbs), (y:year)
WHERE EXISTS (d.year) AND EXISTS (y.year) AND d.year=y.year AND EXISTS (d.region) AND EXISTS (y.cantonName) AND d.region=y.cantonName
CREATE (y)-[:ON_TOPIC]->(d)

// ----------------------------------------------
// ------- demographicsHousehold_Absolute -------
// ----------------------------------------------

// Create nodes from '20XX_demographicsHousehold_Absolute.csv'
UNWIND [{year:2016, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsHousehold/2016_demographicsHousehold_Absolute.csv'}, {year:2017, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsHousehold/2017_demographicsHousehold_Absolute.csv'}, {year:2018, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsHousehold/2018_demographicsHousehold_Absolute.csv'}, {year:2019, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsHousehold/2019_demographicsHousehold_Absolute.csv'}, {year:2020, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsHousehold/2020_demographicsHousehold_Absolute.csv'}] AS demoHouseAbs_urls
LOAD CSV WITH HEADERS FROM demoHouseAbs_urls.url AS demoHouseAbscsv
CREATE (:demoHouseAbs{
	nodeType:'demoHouseAbs',
	year:demoHouseAbs_urls.year,
	region:demoHouseAbscsv.region,
	total:demoHouseAbscsv.total,
	onePersonHousehold:demoHouseAbscsv.onePersonHousehold,
	twoPersonHousehold:demoHouseAbscsv.twoPersonHousehold,
	threePersonHousehold:demoHouseAbscsv.threePersonHousehold,
	fourPersonHousehold:demoHouseAbscsv.fourPersonHousehold,
	fivePersonHousehold:demoHouseAbscsv.fivePersonHousehold,
	sixMorePersonHousehold:demoHouseAbscsv.sixMorePersonHousehold,
	averageSizeHousehold:demoHouseAbscsv.averageSizeHousehold
});

// Create relationship between demoHouseAbs & year
MATCH (d:demoHouseAbs), (y:year)
WHERE EXISTS (d.year) AND EXISTS (y.year) AND d.year=y.year AND EXISTS (d.region) AND EXISTS (y.cantonName) AND d.region=y.cantonName
CREATE (y)-[:ON_TOPIC]->(d)

// ----------------------------------------------
// ------- demographicsEducation_Absolute -------
// ----------------------------------------------

// Create nodes from '20XX_demographicsEducation_Absolute.csv'
UNWIND [{year:2016, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsEducation/2016_demographicsEducation_Absolute.csv'}, {year:2017, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsEducation/2017_demographicsEducation_Absolute.csv'}, {year:2018, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsEducation/2018_demographicsEducation_Absolute.csv'}, {year:2019, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsEducation/2019_demographicsEducation_Absolute.csv'}, {year:2020, url:'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/demographicsEducation/2020_demographicsEducation_Absolute.csv'}] AS demoEduAbs_urls
LOAD CSV WITH HEADERS FROM demoEduAbs_urls.url AS demoEduAbscsv
CREATE (:demoEduAbs{
	nodeType:'demoEduAbs20',
	year:demoEduAbs_urls.year,
	region:demoEduAbscsv.region,
	total:demoEduAbscsv.total,
	total_IC:demoEduAbscsv.total_IC,
	withoutPostCompulsoryEducation:demoEduAbscsv.withoutPostCompulsoryEducation,
	withoutPostCompulsoryEducation_IC:demoEduAbscsv.withoutPostCompulsoryEducation_IC,
	secondLevel2ProfessionalTraining:demoEduAbscsv.secondLevel2ProfessionalTraining,
	secondLevel2ProfessionalTraining_IC:demoEduAbscsv.secondLevel2ProfessionalTraining_IC,
	secondLevel2GeneralTraining:demoEduAbscsv.secondLevel2GeneralTraining,
	secondLevel2GeneralTraining_IC:demoEduAbscsv.secondLevel2GeneralTraining_IC,
	thirdLevelHigherProfessionalTraining:demoEduAbscsv.thirdLevelHigherProfessionalTraining,
	thirdLevelHigherProfessionalTraining_IC:demoEduAbscsv.thirdLevelHigherProfessionalTraining_IC,
	thirdLevelUniversities:demoEduAbscsv.thirdLevelUniversities,
	thirdLevelUniversities_IC:demoEduAbscsv.thirdLevelUniversities_IC
});

// Create relationship between demoEduAbs & year
MATCH (d:demoEduAbs), (y:year)
WHERE EXISTS (d.year) AND EXISTS (y.year) AND d.year=y.year AND EXISTS (d.region) AND EXISTS (y.cantonName) AND d.region=y.cantonName
CREATE (y)-[:ON_TOPIC]->(d)

// -----------------------------------------------------------------------------
// ------- equidsEffectiveCanton, equidsExportCanton, equidsImportCanton -------
// -----------------------------------------------------------------------------

// Create equids node for each canton/year pair
MATCH (y:year)
CREATE (:equids{
	nodeType:'equids',
	year:y.year,
	cantonName:y.cantonName,
	cantonFSO:y.cantonFSO
});

// Create relationship for each canton/year pair
MATCH (e:equids), (y:year)
WHERE EXISTS (e.cantonName) AND EXISTS (y.cantonName) AND e.cantonName=y.cantonName AND EXISTS (e.year) AND EXISTS (y.year) AND e.year=y.year
CREATE (e)-[:STATS_OF_YEAR]->(y)

// Create nodes from 'fig-equids-canton.csv'
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/equidsCantons/fig-equids-canton.csv' AS equidsEffectiveCantoncsv
CREATE (:equidsEffectiveCanton{
	nodeType:'equidsEffectiveCanton',
	Region:equidsEffectiveCantoncsv.Region,
	Year:toInteger(equidsEffectiveCantoncsv.Year),
	Effective:equidsEffectiveCantoncsv.Effective
});

// Create nodes from 'fig-equids-exportCanton.csv'
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/equidsExport/fig-equids-exportCanton.csv' AS equidsExportCantoncsv
CREATE (:equidsExportCanton{
	nodeType:'equidsExportCanton',
    Region:equidsExportCantoncsv.Region,
	Year:toInteger(equidsExportCantoncsv.Year),
	Export:equidsExportCantoncsv.Export
});

// Create nodes from 'fig-equids-importCanton.csv'
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/equidsImport/fig-equids-importCanton.csv' AS equidsImportCantoncsv
CREATE (:equidsImportCanton{
	nodeType:'equidsImportCanton',
    Region:equidsImportCantoncsv.Region,
	Year:toInteger(equidsImportCantoncsv.Year),
	Export:equidsImportCantoncsv.Export
});

// Create relationship between equids & equidsEffectiveCanton
MATCH (e:equids), (eEff:equidsEffectiveCanton)
WHERE EXISTS (e.cantonName) AND EXISTS (eEff.Region) AND e.cantonName=eEff.Region AND EXISTS (e.year) AND EXISTS (eEff.Year) AND e.year=eEff.Year
CREATE (eEff)-[:PART_OF]->(e)

// Create relationship between equids & equidsExportCanton
MATCH (e:equids), (eExp:equidsExportCanton)
WHERE EXISTS (e.cantonName) AND EXISTS (eExp.Region) AND e.cantonName=eExp.Region AND EXISTS (e.year) AND EXISTS (eExp.Year) AND e.year=eExp.Year
CREATE (eExp)-[:PART_OF]->(e)

// Create relationship between equids & equidsImportCanton
MATCH (e:equids), (eImp:equidsImportCanton)
WHERE EXISTS (e.cantonName) AND EXISTS (eImp.Region) AND e.cantonName=eImp.Region AND EXISTS (e.year) AND EXISTS (eImp.Year) AND e.year=eImp.Year
CREATE (eImp)-[:PART_OF]->(e)

// -----------------------------
// ------- Display Graph -------
// -----------------------------

// Display graph
MATCH (n) RETURN n




// ##################################################
// ##################################################
// ##################################################
// ##################################################
// ##################################################

// Communes
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/epicalekspwner/OpenDataCustomerAnalytics/main/geographicsGeometry/localitiesCommunesDistrictsCantons/be-t-00.04-agv-01_GDE.csv' AS communecsv
CREATE (:commune{
	Commune:communecsv.GDENAME,
	CommuneFSO:communecsv.GDENR,
	District:communecsv.GDEBZNA,
	DistrictFSO:communecsv.GDEBZNR,
	Canton:communecsv.GDEKT
});

// Create year node for each canton 
UNWIND range(2016, 2022) as year
MATCH (c:commune)
CREATE (:yearCommune{
	Year:year,
	Commune:c.Commune,
	CommuneFSO:c.CommuneFSO,
	District:c.District,
	DistrictFSO:c.DistrictFSO,
	Canton:c.Canton
});

// Communes relationships
MATCH (ca:canton), (co:commune)
WHERE EXISTS (ca.cantonName) AND EXISTS (co.Canton) AND ca.cantonName=co.Canton
CREATE (co)-[:STATS_OF_CANTON]->(ca)

// Create relationship between year and canton nodes
MATCH (c:commune), (y:yearCommune)
WHERE EXISTS (c.Canton) AND EXISTS (y.Canton) AND c.Canton=y.Canton
CREATE (y)-[:STATS_OF_COMMUNE]->(c)








Zip,Locality,Commune,CommuneFSO,District,DistrictFSO,Canton,CantonFSO,Language


























